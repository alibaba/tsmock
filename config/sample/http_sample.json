{
  //mock server hostname or ip
  "host": "0.0.0.0",
  //mock server port
  "port": 8848,
  //mock server base url, the final url will be http://hos[Match]--port/baseUrl/path?queryparam
  "baseUrl": "/mock",
  //tsmock is based on undertow, it support undertow server options, you can adjust some options to match your need or optimize the performance
  //for detaill options, please refer to http://undertow.io/undertow-docs/undertow-docs-1.3.0/index.html
  //set it as name value pair like below
  "serverOptions": [
    {
      "name": "REQUEST_PARSE_TIMEOUT",
      "value": "100000"
    }
  ],
  //default response setting, if you don't set the response, this default setting will be used
  //use defaults not default as default is java preserved word
  "defaults": {
    "statusCode": 200,
    "body": "{\"matched\":\"default body\"}",
    "contentType": "application/json;charset=utf8"
  },
  //log setting
  "log": {
    //log level, it's log4j log level
    "logLevel":"INFO",
    //log the request, resposne body or not, in case the body is very huge, you don't want to log it
    "logBody": true
  },
  //route table, the core of mock function
  //the match strategy is
  //1. If multiple matches found, the more specific match will be used
  "routeTable": [
    {
      //just a name for this pattern
      "name": "[Match]--[GET]+[Path]",
      //http request, the pattern request will match
      "request": {
        //the url path need to match
        "path": "/get-path",
        //the http method need to match
        "method": "GET"
      },
      //if match the request, this response will be return
      "response": {
        //status code in response
        "statusCode": 200,
        //response body
        "body": "{\"matched\":\"[GET]+[Path]\"}",
        //response content type
        "contentType": "application/json;charset=gbk"
      }
    },
    {
      "name": "[Match]--[POST]+[Path]",
      "request": {
        "path": "/post-path",
        "method": "POST"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[POST]+[Path]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[PUT]+[Path]",
      "request": {
        "path": "/put-path",
        "method": "PUT"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[PUT]+[Path]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[DELETE]+[Path]",
      "request": {
        "path": "/delete-path",
        "method": "DELETE"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[DELETE]+[Path]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    // for query param, use below algorithm
    //query param name, full match, don't support a part of param name match, because it's too complex, for example
    //  route 1 match first 3 param , route 2 match last 3 param, which one should be used, it need a complex priority algorithm.
    //query param value, if route has value match it, it route no value, match it too in case user don't care value, treat route with
    //   value and without value the same priority and return the last one, the same reason, it need complex priority system,
    {
      "name": "[Match]--[GET]+[Path]+[1 query param name]",
      "request": {
        "path": "/get-path",
        "method": "GET",
        "queryParams": [
          {
            "name": "query-param-name1"
          }
        ]
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[GET]+[Path]+[1 query param name]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[GET]+[Path]+[1 query param name]+[1 query param value]",
      "request": {
        "path": "/get-path",
        "method": "GET",
        "queryParams": [
          {
            "name": "query-param-name1",
            "values" :[
            "query-param-value1"
          ]
          }
        ]
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[GET]+[Path]+[1 query param name]+[1 query param value]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[GET]+[Path]+[1 query param name]+[2 query param values]",
      "request": {
        "path": "/get-path",
        "method": "GET",
        "queryParams": [
          {
            "name": "query-param-name1",
            "values" :[
              "query-param-value1",
              "query-param-value2"
            ]
          }
        ]
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[GET]+[Path]+[1 query param name]+[2 query param value]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[GET]+[Path]+[2 query param names]+[2 query param values]",
      "request": {
        "path": "/get-path",
        "method": "GET",
        "queryParams": [
          {
            "name": "query-param-name1",
            "values" :[
              "query-param-value1"
            ]
          },
          {
            "name": "query-param-name2",
            "values" :[
              "query-param-value2"
            ]
          }
        ]
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[GET]+[Path]+[2 query param names]+[2 query param value]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[POST]+[Path]+[1 form param name]",
      "request": {
        "path": "/post-path",
        "method": "POST",
        "formParams": [
          {
            "name": "form-param-name1"
          }
        ]
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[POST]+[Path]+[1 form param name]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[POST]+[Path]+[1 form param name]+[1 form param value]",
      "request": {
        "path": "/post-path",
        "method": "POST",
        "formParams": [
          {
            "name": "form-param-name1",
            "value" : "form-param-value1"
          }
        ]
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[POST]+[Path]+[1 form param name]+[1 form param value]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[POST]+[Path]+[2 form param value]+[2 form param value]",
      "request": {
        "path": "/post-path",
        "method": "POST",
        "formParams": [
          {
            "name": "form-param-name1",
            "value" : "form-param-value1"
          },
          {
            "name": "form-param-name2",
            "value" : "form-param-value2"
          }
        ]
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[POST]+[Path]+[2 form param name]+[2 form param value]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[POST]+[Path]+[Body regex]",
      "request": {
        "path": "/post-path",
        "method": "POST",
        "bodyRegex":"^test:body$"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[POST]+[Path]+[Body regex]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[BodyPointingToFile]",
      "request": {
        "path": "/body-point-to-file",
        "method": "GET"
      },
      "response": {
        "statusCode": 200,
        "bodyPointingToFile": true,
        "body": "src/test/data/utbody.json",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[Default Response]",
      "request": {
        "path": "/body-default-response",
        "method": "GET"
      },
      "response": {
      }
    },
    {
      "name": "[Match]--[Sleep in response]",
      "request": {
        "path": "/get-sleep",
        "method": "GET"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[GET]+[Path]\"}",
        "contentType": "application/json;charset=gbk",
        //sleep is millisecond
        "sleep":5000
      }
    },
    {
      "name": "[Match]--[Compress]",
      "request": {
        "path": "/get-compress",
        "method": "GET"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[GET]+[Compress]\"}",
        "contentType": "application/json;charset=gbk",
        //only supoort zip now
        "compress":"gzip"
      }
    },
    {
      "name": "[Match]--[Script in request]+[Save request]",
      "request": {
        "path": "/post-script-save-request",
        "method": "POST",
        "bodyRegex":"^test:body$",
        //request support 2 predefined parameters, script must return a boolean
        //${request_body}, request body
        //${request_query_str}, request query string
        "script": "src/test/script/http/request/save_request.bsh"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[Script in request]+[Save request]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[Script in request]+[Validate request]",
      "request": {
        "path": "/post-script-validate-request",
        "method": "POST",
        "bodyRegex":"^test:body$",
        "script": "src/test/script/http/request/validate_request.bsh"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[Script in request]+[Validate request]\"}",
        "contentType": "application/json;charset=utf8"
      }
    },
    {
      "name": "[Match]--[Script in response]+[Transform response]",
      "request": {
        "path": "/post-script-transform-response",
        "method": "POST",
        "bodyRegex":"^test:body$"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"<body>\"}",
        "contentType": "application/json;charset=utf8",
        //response support 3 predefined parameters, script must return a string
        //${request_body}, request body
        //${request_query_str}, request query string
        //${response_body}, response body
        "script": "src/test/script/http/response/transform_response.bsh"
      }
    },
    {
      "name": "[Match]--[proxy]",
      "request": {
        "path": "/get-proxy",
        "method": "GET",
        "queryParams": [
          {
            "name": "query-param-name1",
            "values" :[
              "query-param-value1"
            ]
          }
        ]
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[Proxy]\"}",
        "contentType": "application/json;charset=utf8"
      },
      //if proxy is enable, proxy the request to targetUrl
      "proxy": {
        "enabled": true,
        "targetUrl": "http://localhost:8848/mock/get-path"
      }
    },
    {
      "name": "[Match]--[Callback]+[Http]",
      "request": {
        "path": "/get-callback-http",
        "method": "GET"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[Callback]+[Http]\"}",
        "contentType": "application/json;charset=gbk"
      },
      "callbacks": [
        {
          "type": "http",
          "info": "method=POST,url=http://localhost:8848/mock/post-path",
          //only support send the raw body
          "value": "{\"callback\":\"http-post\"}",
        }
      ]
    },
    {
      "name": "[Match]--[Callback]+[MQ]",
      "request": {
        "path": "/get-callback-mq",
        "method": "GET"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[Callback]+[MQ]\"}",
        "contentType": "application/json;charset=gbk"
      },
      "callbacks": [
        {
          "type": "mq",
          "info": "producer=testprocecer,topic=testtopic,tag=testtag,key=testkey",
          "value": "{\"callback\":\"mq\"}",
        }
      ]
    },
    {
      "name": "[Match]--[Callback]+[Websocket]",
      "request": {
        "path": "/get-callback-websocket",
        "method": "GET"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[Callback]+[Websocket]\"}",
        "contentType": "application/json;charset=gbk"
      },
      "callbacks": [
        {
          "type": "websocket",
          "info": "url=ws://lcoalhost:8848/mock/websocket",
          "value": "{\"callback\":\"websocket\"}",
        }
      ]
    },
    {
      "name": "[Match]--[Sleep in callback]",
      "request": {
        "path": "/get-callback-http",
        "method": "GET"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[Callback]+[Http]\"}",
        "contentType": "application/json;charset=gbk"
      },
      "callbacks": [
        {
          "type": "http",
          "info": "method=POST,url=http://localhost:8848/mock/post-path",
          //only support send the raw body
          "value": "{\"callback\":\"http-post\"}",
          "sleep": 5000
        }
      ]
    },
    {
      "name": "[Match]--[Script in callback]",
      "request": {
        "path": "/get-callback-http",
        "method": "GET"
      },
      "response": {
        "statusCode": 200,
        "body": "{\"matched\":\"[Callback]+[Http]\"}",
        "contentType": "application/json;charset=gbk"
      },
      "callbacks": [
        {
          "type": "http",
          "info": "method=POST,url=http://localhost:8848/mock/post-path",
          "value": "<callbackbody>",
          //callback script support 5 predefined params
          //${info}, info in route
          //${value}, value in route
          //${request_body}, request body
          //${response_body}, response body
          //${request_query_str}, request query string
          //callback has to return a object with properties info and value which means the processd info and value
          "script":"src/test/script/http/callback/transform_callback.bsh"
        }
      ]
    },
  ]
}
